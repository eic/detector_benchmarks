image: ${BENCHMARKS_REGISTRY}/${BENCHMARKS_CONTAINER}:${BENCHMARKS_TAG}

variables:
  DETECTOR: epic
  DETECTOR_CONFIG: epic_craterlake
  DETECTOR_REPOSITORYURL: 'https://github.com/eic/epic.git'
  GITHUB_SHA: ''
  GITHUB_REPOSITORY: ''

workflow:
  name: '$PIPELINE_NAME'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "webide"'
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_TAG'

default:
  tags:
    - phy-scratch
  artifacts:
    expire_in: 72 hours 
    paths:
      - .local/detector
      - .local/lib
      - .local/bin
      - .local/include
      - .local/share
      - .snakemake/log
      - results
      - config
      - .env
      - summary.txt
    reports:
      dotenv: .env

stages:
  - status-pending
  - config
  - initialize
  - data_init
  - simulate
  - calibrate
  - benchmarks
  - collect
  - deploy
  - status-report

.status:
  image: curlimages/curl:latest
  script:
    - |
      if [ -n "${GITHUB_SHA}" ] ; then
        curl \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: token ${GITHUB_REPO_STATUS_TOKEN}" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${GITHUB_SHA}" \
          -d '{"state":"'"${STATE}"'",
               "target_url":"'"${CI_PIPELINE_URL}"'",
               "description":"'"${DESCRIPTION} $(TZ=America/New_York date)"'",
               "context":"eicweb/detector_benchmarks ('"$DETECTOR_CONFIG"')"
              }' ;
      fi


benchmarks:detector:pending:
  stage: status-pending
  extends: .status
  variables:
    STATE: "pending"
    DESCRIPTION: "Started..."
  when: always

common:setup:
  stage: config
  before_script:
  script:
    - |
      if [[ "${COMMON_BENCH_VERSION}" == "" ]] ; then
        export COMMON_BENCH_VERSION="master" 
      fi
      echo "COMMON_BENCH_VERSION = ${COMMON_BENCH_VERSION}" 
      echo "COMMON_BENCH_VERSION=${COMMON_BENCH_VERSION}" >> .env
      git clone -b "${COMMON_BENCH_VERSION}" https://eicweb.phy.anl.gov/EIC/benchmarks/common_bench.git setup 
      echo "BENCHMARKS_TAG: ${BENCHMARKS_TAG}"
      echo "BENCHMARKS_CONTAINER: ${BENCHMARKS_CONTAINER}"
      echo "BENCHMARKS_REGISTRY: ${BENCHMARKS_REGISTRY}"
    - source setup/bin/env.sh && ./setup/bin/install_common.sh


common:detector:
  stage: initialize
  needs: ["common:setup"]
  script:
    - source .local/bin/env.sh && build_detector.sh
    - mkdir_local_data_link sim_output
    - mkdir -p results
    - mkdir -p config
    - print_env.sh

get_data:
  stage: data_init
  needs: ["common:detector"]
  script:
    - source .local/bin/env.sh
    - ln -s "${LOCAL_DATA_PATH}/sim_output" sim_output
    - ln -s "${LOCAL_DATA_PATH}/datasets/data" data
    - cd ${LOCAL_DATA_PATH} && git clone --depth=1 https://eicweb.phy.anl.gov/EIC/datasets.git datasets

.det_benchmark:
  needs:
    - ["get_data","common:detector"]
  before_script:
    - mc config host add S3 https://eics3.sdcc.bnl.gov:9000 ${S3_ACCESS_KEY} ${S3_SECRET_KEY}
    - source .local/bin/env.sh
    - ls -lrtha 
    - ln -s "${LOCAL_DATA_PATH}/sim_output" sim_output
    - ln -s "${LOCAL_DATA_PATH}/datasets/data" data
    # snakemake support
    - mkdir "${DETECTOR_CONFIG}"
    - ln -s "${LOCAL_DATA_PATH}/sim_output" "${DETECTOR_CONFIG}/sim_output"
    - ln -s "../results" "${DETECTOR_CONFIG}/results"
    - mkdir -p "$SNAKEMAKE_OUTPUT_CACHE"
    - ls -lrtha
  retry:
    max: 2
    when:
      - runner_system_failure

include: 
  - local: 'benchmarks/backgrounds/config.yml'
  - local: 'benchmarks/backwards_ecal/config.yml'
  - local: 'benchmarks/ecal_gaps/config.yml'
  - local: 'benchmarks/tracking_detectors/config.yml'
  - local: 'benchmarks/tracking_performances/config.yml'
  - local: 'benchmarks/barrel_ecal/config.yml'
  - local: 'benchmarks/barrel_hcal/config.yml'
  - local: 'benchmarks/zdc/config.yml'
  - local: 'benchmarks/zdc_lyso/config.yml'
  - local: 'benchmarks/material_maps/config.yml'
  - local: 'benchmarks/material_scan/config.yml'
  - local: 'benchmarks/pid/config.yml'
  - local: 'benchmarks/timing/config.yml'
  - local: 'benchmarks/b0_tracker/config.yml'

deploy_results:
  allow_failure: true
  stage: deploy
  needs:
    - "collect_results:backgrounds"
    - "collect_results:backwards_ecal"
    - "collect_results:barrel_ecal"
    - "collect_results:barrel_hcal"
    - "collect_results:ecal_gaps"
    - "collect_results:material_scan"
    - "collect_results:pid"
    - "collect_results:tracking_performance"
    - "collect_results:tracking_performance_campaigns"
    - "collect_results:zdc"
    - "collect_results:zdc_lyso"
  script:
    - echo "deploy results!"
    - find results -print | sort | tee summary.txt
    - xrdfs $XROOTD_RW_ENDPOINT mkdir $XROOTD_OUTPUT_PREFIX/pipeline-$CI_PIPELINE_ID
    - xrdcp -r results $XROOTD_RW_ENDPOINT/$XROOTD_OUTPUT_PREFIX/pipeline-$CI_PIPELINE_ID

benchmarks:detector:success:
  stage: status-report
  dependencies: []
  extends: .status
  variables:
    STATE: "success"
    DESCRIPTION: "Succeeded!"
  after_script:
    # Cleanup scratch space
    - rm -rfv $LOCAL_DATA_PATH
  when: on_success

benchmarks:detector:failure:
  stage: status-report
  dependencies: []
  extends: .status
  variables:
    STATE: "failure"
    DESCRIPTION: "Failed!"
  when: on_failure

pages:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_SERVER_HOST != "eicweb.phy.anl.gov"'
  cache:
    paths:
      - node_modules/
  image: node:latest
  script:
    - mkdir public && cp doc/main.html public/index.html
  artifacts:
    paths:
      - public
