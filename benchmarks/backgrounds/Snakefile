import os
import shutil


rule backgrounds_get_beam_gas_electron:
    input:
        provider.remote(remote_path("EPIC/EVGEN/BACKGROUNDS/BEAMGAS/electron/GETaLM1.0.0-1.0/10GeV/GETaLM1.0.0-1.0_ElectronBeamGas_10GeV_foam_emin10keV_run001.hepmc3.tree.root")),
    output:
        "input/backgrounds/GETaLM1.0.0-1.0_ElectronBeamGas_10GeV_foam_emin10keV_run001.hepmc3.tree.root",
    run:
        shutil.move(input[0], output[0])


rule backgrounds_get_beam_gas_proton:
    input:
        provider.remote(remote_path("EPIC/EVGEN/BACKGROUNDS/BEAMGAS/proton/pythia8.306-1.0/100GeV/pythia8.306-1.0_ProtonBeamGas_100GeV_run001.hepmc3.tree.root")),
    output:
        "input/backgrounds/pythia8.306-1.0_ProtonBeamGas_100GeV_run001.hepmc3.tree.root",
    run:
        shutil.move(input[0], output[0])


rule backgrounds_get_DIS:
    input:
        provider.remote(remote_path("EPIC/EVGEN/DIS/NC/{BEAM}/minQ2={MINQ2}/pythia8NCDIS_{BEAM}_minQ2={MINQ2}_{SUFFIX}.hepmc3.tree.root")),
    wildcard_constraints:
        BEAM="\d+x\d+",
        MINQ2="\d+",
    output:
        "input/backgrounds/pythia8NCDIS_{BEAM}_minQ2={MINQ2}_{SUFFIX}.hepmc3.tree.root",
    run:
        shutil.move(input[0], output[0])


rule backgrounds_sim:
    input:
        hepmc="input/backgrounds/{NAME}.hepmc3.tree.root",
        warmup="warmup/{DETECTOR_CONFIG}.edm4hep.root",
    output:
        "sim_output/{DETECTOR_CONFIG}/backgrounds/{NAME}.edm4hep.root",
    log:
        "sim_output/{DETECTOR_CONFIG}/backgrounds/{NAME}.edm4hep.root.log",
    params:
        N_EVENTS=100
    shell:
        """
ddsim \
  --runType batch \
  --part.minimalKineticEnergy 100*GeV  \
  --filter.tracker edep0 \
  -v WARNING \
  --numberOfEvents {params.N_EVENTS} \
  --compactFile $DETECTOR_PATH/{wildcards.DETECTOR_CONFIG}.xml \
  --inputFiles {input.hepmc} \
  --outputFile {output}
"""


DETECTOR_CONFIG=os.environ["DETECTOR_CONFIG"]

rule backgrounds_ecal_backwards:
    input:
        matplotlibrc=".matplotlibrc",
        script="benchmarks/backgrounds/ecal_backwards.py",
        electron_beam_gas_gen="input/backgrounds/GETaLM1.0.0-1.0_ElectronBeamGas_10GeV_foam_emin10keV_run001.hepmc3.tree.root",
        electron_beam_gas_sim="sim_output/" + DETECTOR_CONFIG + "/backgrounds/GETaLM1.0.0-1.0_ElectronBeamGas_10GeV_foam_emin10keV_run001.edm4hep.root",
        physics_signal_sim="sim_output/" + DETECTOR_CONFIG + "/backgrounds/pythia8NCDIS_10x100_minQ2=1_beamEffects_xAngle=-0.025_hiDiv_1.edm4hep.root",
        proton_beam_gas_gen="input/backgrounds/pythia8.306-1.0_ProtonBeamGas_100GeV_run001.hepmc3.tree.root",
        proton_beam_gas_sim="sim_output/" + DETECTOR_CONFIG + "/backgrounds/pythia8.306-1.0_ProtonBeamGas_100GeV_run001.edm4hep.root",
    output:
        directory("results/backgrounds/backwards_ecal")
    threads: workflow.cores
    shell:
        """
set -m # monitor mode to prevent lingering shells
cleanup() {{
  echo Cleaning up
  kill $WORKER_PID $SCHEDULER_PID
}}
trap cleanup EXIT

PORT=$RANDOM
dask scheduler --port $PORT &
export DASK_SCHEDULER=localhost:$PORT
SCHEDULER_PID=$!
dask worker tcp://$DASK_SCHEDULER --nworkers {threads} --nthreads 1 &
WORKER_PID=$!
env \
MATPLOTLIBRC={input.matplotlibrc} \
ELECTRON_BEAM_GAS_GEN=$(realpath {input.electron_beam_gas_gen}) \
ELECTRON_BEAM_GAS_SIM=$(realpath {input.electron_beam_gas_sim}) \
PHYSICS_PROCESS_SIM=$(realpath {input.physics_signal_sim}) \
PROTON_BEAM_GAS_GEN=$(realpath {input.proton_beam_gas_gen}) \
PROTON_BEAM_GAS_SIM=$(realpath {input.proton_beam_gas_sim}) \
OUTPUT_DIR={output} \
python {input.script}
"""
