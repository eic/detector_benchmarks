def get_n_events(wildcards):
    energy = float(wildcards.ENERGY.replace("GeV", "").replace("MeV", "e-3"))
    n_events = 1000 if wildcards.PARTICLE == "e-" else 2000
    n_events = int(n_events // (energy ** 0.5))
    return n_events


rule backwards_ecal_sim:
    input:
        steering_file="EPIC/EVGEN/SINGLE/{PARTICLE}/{ENERGY}/{PHASE_SPACE}/{PARTICLE}_{ENERGY}_{PHASE_SPACE}.steer",
        warmup="warmup/{DETECTOR_CONFIG}.edm4hep.root",
    output:
        "sim_output/backwards_ecal/{DETECTOR_CONFIG}/{PARTICLE}/{ENERGY}/{PHASE_SPACE}/{PARTICLE}_{ENERGY}_{PHASE_SPACE}.{INDEX}.edm4hep.root",
    log:
        "sim_output/backwards_ecal/{DETECTOR_CONFIG}/{PARTICLE}/{ENERGY}/{PHASE_SPACE}/{PARTICLE}_{ENERGY}_{PHASE_SPACE}.{INDEX}.edm4hep.root.log",
    wildcard_constraints:
        PARTICLE="(e-|pi-)",
        ENERGY="[0-9]+[kMG]eV",
        PHASE_SPACE="(3to50|45to135|130to177)deg",
        INDEX="\d{4}",
    params:
        N_EVENTS=get_n_events
    shell:
        """
set -m # monitor mode to prevent lingering processes
exec ddsim \
  --runType batch \
  --enableGun \
  --steeringFile "{input.steering_file}" \
  --random.seed 1{wildcards.INDEX} \
  --filter.tracker edep0 \
  -v WARNING \
  --numberOfEvents {params.N_EVENTS} \
  --compactFile $DETECTOR_PATH/{wildcards.DETECTOR_CONFIG}.xml \
  --outputFile {output}
"""


rule backwards_ecal_recon:
    input:
        "sim_output/backwards_ecal/{DETECTOR_CONFIG}/{PARTICLE}/{ENERGY}/{PHASE_SPACE}/{PARTICLE}_{ENERGY}_{PHASE_SPACE}.{INDEX}.edm4hep.root",
    output:
        "sim_output/backwards_ecal/{DETECTOR_CONFIG}/{PARTICLE}/{ENERGY}/{PHASE_SPACE}/{PARTICLE}_{ENERGY}_{PHASE_SPACE}.{INDEX}.eicrecon.tree.edm4eic.root",
    log:
        "sim_output/backwards_ecal/{DETECTOR_CONFIG}/{PARTICLE}/{ENERGY}/{PHASE_SPACE}/{PARTICLE}_{ENERGY}_{PHASE_SPACE}.{INDEX}.eicrecon.tree.edm4eic.root.log",
    wildcard_constraints:
        INDEX="\d{4}",
    shell: """
set -m # monitor mode to prevent lingering processes
exec env DETECTOR_CONFIG={wildcards.DETECTOR_CONFIG} \
  eicrecon {input} -Ppodio:output_file={output} \
  -Ppodio:output_collections=MCParticles,EcalEndcapNRecHits,EcalEndcapNClusters
"""


rule backwards_ecal_recon_many:
    input:
        expand(
            "sim_output/backwards_ecal/{{DETECTOR_CONFIG}}/{{PARTICLE}}/{{ENERGY}}/{{PHASE_SPACE}}/{{PARTICLE}}_{{ENERGY}}_{{PHASE_SPACE}}.{INDEX:04d}.eicrecon.tree.edm4eic.root",
            INDEX=range(20),
        ),
    output:
        touch("sim_output/backwards_ecal/{DETECTOR_CONFIG}/{PARTICLE}/{ENERGY}/{PHASE_SPACE}/flag"),


DETECTOR_CONFIG=os.environ["DETECTOR_CONFIG"]

rule backwards_ecal:
    input:
        expand(
            "sim_output/backwards_ecal/" + DETECTOR_CONFIG + "/{PARTICLE}/{ENERGY}/{PHASE_SPACE}/flag",
            PARTICLE=["pi-", "e-"],
            ENERGY=[
                "100MeV",
                "200MeV",
                "500MeV",
                "1GeV",
                "2GeV",
                "5GeV",
                "10GeV",
                "20GeV",
            ],
            PHASE_SPACE=["130to177deg"],
        ),
        matplotlibrc=".matplotlibrc",
        script="benchmarks/backwards_ecal/backwards_ecal.py",
    output:
        directory("results/backwards_ecal")
    shell:
        """
env \
MATPLOTLIBRC={input.matplotlibrc} \
DETECTOR_CONFIG=""" + DETECTOR_CONFIG + """ \
PLOT_TITLE=""" + DETECTOR_CONFIG + """ \
INPUT_PATH_FORMAT=sim_output/backwards_ecal/""" + DETECTOR_CONFIG + """/{{particle}}/{{energy}}/130to177deg/{{particle}}_{{energy}}_130to177deg.{{ix:04d}}.eicrecon.tree.edm4eic.root \
OUTPUT_DIR={output} \
python {input.script}
"""
