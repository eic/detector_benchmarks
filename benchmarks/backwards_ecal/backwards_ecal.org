#+PROPERTY: header-args:jupyter-python :session /jpy:localhost#8888:backwards_ecal :async yes :results drawer :exports both

#+TITLE: ePIC EEEMCal benchmark
#+AUTHOR: Dmitry Kalinkin
#+OPTIONS: d:t

#+LATEX_CLASS_OPTIONS: [9pt,letter]
#+BIND: org-latex-image-default-width ""
#+BIND: org-latex-image-default-option "scale=0.3"
#+BIND: org-latex-images-centered nil
#+BIND: org-latex-minted-options (("breaklines") ("bgcolor" "black!5") ("frame" "single"))
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \setlength{\parindent}{0pt}
#+LATEX: \sloppy

#+begin_src jupyter-python :results silent
import os
from pathlib import Path

import awkward as ak
import numpy as np
import vector
import uproot
from sklearn.metrics import roc_curve

vector.register_awkward()
#+end_src

* Plotting setup
                
#+begin_src jupyter-python :results silent
import matplotlib as mpl
import matplotlib.pyplot as plt
       
def setup_presentation_style():
    mpl.rcParams.update(mpl.rcParamsDefault)
    plt.style.use('ggplot')
    plt.rcParams.update({
        'axes.labelsize': 8,
        'axes.titlesize': 9,
        'figure.titlesize': 9,
        'figure.figsize': (4, 3),
        'legend.fontsize': 7,
        'xtick.labelsize': 8,
        'ytick.labelsize': 8,
        'xaxis.labellocation': 'right',
        'yaxis.labellocation': 'top',
        'pgf.rcfonts': False,
    })

setup_presentation_style()
#+end_src       

* Parameters

#+begin_src jupyter-python :results silent
DETECTOR_CONFIG=os.environ.get("DETECTOR_CONFIG")
PLOT_TITLE=os.environ.get("PLOT_TITLE")
INPUT_PATH_FORMAT=os.environ.get("INPUT_PATH_FORMAT", "EPIC/RECO/24.04.0/epic_craterlake/SINGLE/{particle}/{energy}/130to177deg/{particle}_{energy}_130to177deg.{ix:04d}.eicrecon.tree.edm4eic.root")

output_dir=Path(os.environ.get("OUTPUT_DIR", "./"))
output_dir.mkdir(parents=True, exist_ok=True)
#+end_src

* Analysis

First, we define a requirement on what phase we will consider for our
analysis. The following function filters single-particle events that
are thrown within $-3.5 < \eta < -2.0$:

#+begin_src jupyter-python
def filter_pointing(events):
    part_momentum = ak.zip({
        "m": events["MCParticles.mass"],
        "px": events["MCParticles.momentum.x"],
        "py": events["MCParticles.momentum.y"],
        "pz": events["MCParticles.momentum.z"],
    }, with_name="Momentum4D")
    cond = (part_momentum.eta[:,0] > -3.5) & (part_momentum.eta[:,0] < -2.)
    return events[cond]
#+end_src

#+begin_src jupyter-python
energies = [
    "100MeV",
    "200MeV",
    "500MeV",
    "1GeV",
    "2GeV",
    "5GeV",
    "10GeV",
    "20GeV",
]

filter_name = [
    "MCParticles.*",
    "*EcalEndcapNRecHits*",
    "*EcalEndcapNClusters*",
]

pi_eval = {}
e_eval = {}

def readlist(path):
    with open(path, "rt") as fp:
        paths = [line.rstrip() for line in fp.readlines()]
    return paths

for energy in energies:
    pi_eval[energy] = filter_pointing(uproot.concatenate(
        {path: "events" for path in readlist(INPUT_PATH_FORMAT.format(particle="pi-", energy=energy))},
        filter_name=filter_name,
    ))
    e_eval[energy] = filter_pointing(uproot.concatenate(
        {path: "events" for path in readlist(INPUT_PATH_FORMAT.format(particle="e-", energy=energy))},
        filter_name=filter_name,
    ))
#+end_src

** Energy resolution

#+begin_src jupyter-python
fig, axs = plt.subplots(2, 4, sharex=True, sharey=True, figsize=(15, 6))

axs = np.ravel(np.array(axs))

sigmas_rel_FWHM_cb = {}
fractions_below = {}

for ix, energy in enumerate(energies):
    for use_clusters in [False, True]:
        energy_value = float(energy.replace("GeV", "").replace("MeV", "e-3"))
        if use_clusters:
            clf_label = "leading cluster"
        else:
            clf_label = "sum all hits"
        def clf(events):
            if use_clusters:
                return ak.drop_none(ak.max(events["EcalEndcapNClusters.energy"], axis=-1)) / energy_value
            else:
                return ak.sum(events["EcalEndcapNRecHits.energy"], axis=-1) / energy_value
        e_pred = clf(e_eval[energy])

        plt.sca(axs[ix])
        counts, bins, patches = plt.hist(e_pred, weights=np.full_like(e_pred, 1.0 / ak.num(e_pred, axis=0)), bins=np.linspace(0.01, 1.01, 101), label=rf"$e^-$ {clf_label}", hatch=None if use_clusters else r"xxx", alpha=0.8 if use_clusters else 1.)
        plt.title(f"{energy}")

        e_over_p = (bins[1:] + bins[:-1]) / 2
        import scipy.stats
        def f(x, n, beta, m, loc, scale):
            return n * scipy.stats.crystalball.pdf(x, beta, m, loc, scale)
        p0 = (np.sum(counts[10:]), 2., 3., 0.95, 0.05)

        try:
            import scipy.optimize
            par, pcov = scipy.optimize.curve_fit(f, e_over_p[5:], counts[5:], p0=p0, maxfev=10000)
        except RuntimeError:
            par = None
        plt.plot(e_over_p, f(e_over_p, *par), label=rf"Crystal Ball fit", color="tab:green" if use_clusters else "green", lw=0.8)

        def summarize_fit(par):
            _, _, _, loc_cb, scale_cb = par
            # Calculate FWHM
            y_max = np.max(f(np.linspace(0., 1., 100), *par))
            f_prime = lambda x: f(x, *par) - y_max / 2
            x_plus, = scipy.optimize.root(f_prime, loc_cb + scale_cb).x
            x_minus, = scipy.optimize.root(f_prime, loc_cb - scale_cb).x
            color = "cyan" if use_clusters else "orange"
            plt.axvline(x_minus, ls="--", lw=0.75, color=patches[0].get_facecolor(), label=r"$\mu - $FWHM")
            plt.axvline(x_plus, ls=":", lw=0.75, color=patches[0].get_facecolor(), label=r"$\mu + $FWHM")
            fwhm = (x_plus - x_minus) / loc_cb
            sigma_rel_FWHM_cb = fwhm / 2 / np.sqrt(2 * np.log(2))

            cutoff_x = loc_cb - fwhm
            fraction_below = np.sum(counts[e_over_p < cutoff_x]) / ak.num(e_pred, axis=0)

            return sigma_rel_FWHM_cb, fraction_below

        sigma_rel_FWHM_cb, fraction_below = summarize_fit(par)
        sigmas_rel_FWHM_cb.setdefault(clf_label, {})[energy] = sigma_rel_FWHM_cb
        fractions_below.setdefault(clf_label, {})[energy] = fraction_below

        plt.legend()
        plt.xlabel("$E/p$", loc="right")
        plt.ylabel("Event yield", loc="top")

fig.savefig(output_dir / f"resolution_plots.pdf", bbox_inches="tight")
fig.savefig(output_dir / f"resolution_plots.png", bbox_inches="tight")
plt.show()
plt.close(fig)

plt.figure()
energy_values = np.array([float(energy.replace("GeV", "").replace("MeV", "e-3")) for energy in energies])

for clf_label, sigma_rel_FWHM_cb in sigmas_rel_FWHM_cb.items():
    sigma_over_e = np.array([sigma_rel_FWHM_cb[energy] for energy in energies]) * 100 # convert to %

    def f(energy, stochastic, constant):
        return np.sqrt((stochastic / np.sqrt(energy)) ** 2 + constant ** 2)
    cond = energy_values >= 0.5
    try:
        import scipy.optimize
        par, pcov = scipy.optimize.curve_fit(f, energy_values[cond], sigma_over_e[cond], maxfev=10000)
    except RuntimeError:
        par = None
    stochastic, constant = par

    plt.plot(
        energy_values,
        sigma_over_e,
        marker=".",
        label=f"{clf_label}"
    )
    plt.plot(
        energy_values[cond],
        f(energy_values[cond], *par),
        color="black",
        ls="--",
        lw=0.5,
        label=f"{clf_label}, ${np.ceil(stochastic * 10) / 10:.1f}\% / \sqrt{{E}} \oplus {np.ceil(constant * 10) / 10:.1f}\%$",
    )
plt.fill_between(
    energy_values,
    np.sqrt((2 / np.sqrt(energy_values)) ** 2 + 1 ** 2),
    np.sqrt((2 / np.sqrt(energy_values)) ** 2 + 3 ** 2),
    alpha=0.2, color="black", label=r"YR requirement $2\% / \sqrt{E} \oplus (1-3)\%$",
)
plt.legend()
plt.xlabel("Energy, GeV", loc="right")
plt.ylabel(r"$\sigma_{E} / E$ derived from FWHM, %", loc="top")
plt.savefig(output_dir / f"resolution.pdf", bbox_inches="tight")
plt.savefig(output_dir / f"resolution.png", bbox_inches="tight")
plt.show()
#+end_src

** Pion rejection

#+begin_src jupyter-python
fig, axs = plt.subplots(2, 4, sharex=True, sharey=True, figsize=(15, 6))
fig_log, axs_log = plt.subplots(2, 4, sharex=True, sharey=True, figsize=(15, 6))
fig_roc, axs_roc = plt.subplots(2, 4, sharex=True, sharey=True, figsize=(15, 6))

axs = np.ravel(np.array(axs))
axs_log = np.ravel(np.array(axs_log))
axs_roc = np.ravel(np.array(axs_roc))

rocs = {}

for ix, energy in enumerate(energies):
    for use_clusters in [False, True]:
        energy_value = float(energy.replace("GeV", "").replace("MeV", "e-3"))
        if use_clusters:
            clf_label = "leading cluster"
        else:
            clf_label = "sum all hits"
        def clf(events):
            if use_clusters:
                return ak.drop_none(ak.max(events["EcalEndcapNClusters.energy"], axis=-1)) / energy_value
            else:
                return ak.sum(events["EcalEndcapNRecHits.energy"], axis=-1) / energy_value
        e_pred = clf(e_eval[energy])
        pi_pred = clf(pi_eval[energy])

        for do_log, ax in [(False, axs[ix]), (True, axs_log[ix])]:
            plt.sca(ax)
            plt.hist(e_pred, weights=np.full_like(e_pred, 1.0 / ak.num(e_pred, axis=0)), bins=np.linspace(0., 1.01, 101), label=rf"$e^-$ {clf_label}", hatch=None if use_clusters else r"xxx", alpha=0.8 if use_clusters else 1.)
            plt.hist(pi_pred, weights=np.full_like(pi_pred, 1.0 / ak.num(pi_pred, axis=0)), bins=np.linspace(0., 1.01, 101), label=rf"$\pi^-$ {clf_label}", histtype="step")
            plt.title(f"{energy}")
            plt.legend()
            plt.xlabel("Classifier output")
            plt.ylabel("Event yield")
            if do_log:
                plt.yscale("log")

        plt.sca(axs_roc[ix])
        fpr, tpr, _ = roc_curve(
            np.concatenate([np.ones_like(e_pred), np.zeros_like(pi_pred)]),
            np.concatenate([e_pred, pi_pred]),
        )
        cond = fpr != 0 # avoid infinite rejection (region of large uncertainty)
        cond &= tpr != 1 # avoid linear interpolation (region of large uncertainty)
        def mk_interp(tpr, fpr):
            def interp(eff):
                return np.interp(eff, tpr, fpr)
            return interp
        rocs.setdefault(clf_label, {})[energy] = mk_interp(tpr, fpr)
        plt.plot(tpr[cond] * 100, 1 / fpr[cond], label=f"{clf_label}")
        plt.yscale("log")
        plt.title(f"{energy}")
        plt.legend(loc="lower left")
        plt.xlabel("Electron efficiency, %")
        plt.ylabel("Pion rejection factor")

fig.savefig(output_dir / f"pred.pdf", bbox_inches="tight")
fig.savefig(output_dir / f"pred.png", bbox_inches="tight")
plt.close(fig)
fig_log.savefig(output_dir / f"pred_log.pdf", bbox_inches="tight")
fig_log.savefig(output_dir / f"pred_log.png", bbox_inches="tight")
fig_log.show()
fig_roc.savefig(output_dir / f"roc.pdf", bbox_inches="tight")
fig_roc.savefig(output_dir / f"roc.png", bbox_inches="tight")
fig_roc.show()

plt.figure()
for clf_label, roc in rocs.items():
    plt.plot(
        [float(energy.replace("GeV", "").replace("MeV", "e-3")) for energy in energies],
        [1 / roc[energy](0.95) for energy in energies],
        marker=".",
        label=f"{clf_label}",
    )
plt.yscale("log")
plt.legend()
plt.xlabel("Energy, GeV")
plt.ylabel("Pion rejection at 95%")
plt.savefig(output_dir / f"pion_rej.pdf", bbox_inches="tight")
plt.savefig(output_dir / f"pion_rej.png", bbox_inches="tight")
plt.show()
#+end_src
