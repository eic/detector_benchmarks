SIMOUTDIR="sim_output/beamline/"
ANALYSISDIR=SIMOUTDIR+"analysis/"

rule beamline_steering_sim:
    input:
        warmup="warmup/epic_ip6_extended.edm4hep.root",
        macro=workflow.source_path("beamlineGPS.mac"),
    output:
        SIMOUTDIR+"beamlineTest{CAMPAIGN}.edm4hep.root",
    shell:
        """
            exec npsim \
            --runType run \
            --random.seed 1 \
            --enableG4GPS \
            --macroFile {input.macro} \
            --compactFile $DETECTOR_PATH/epic_ip6_extended.xml \
            --printLevel WARNING \
            --outputFile {output} \
            --physics.rangecut 100*m
        """

rule beamline_acceptance_sim:
    input:
        warmup="warmup/epic_ip6_extended.edm4hep.root",
        macro=workflow.source_path("acceptanceGPS.mac"),
    output:
        SIMOUTDIR+"acceptanceTest{CAMPAIGN}.edm4hep.root",
    shell:
        """
            exec npsim \
            --runType run \
            --random.seed 1 \
            --enableG4GPS \
            --macroFile {input.macro} \
            --compactFile $DETECTOR_PATH/epic_ip6_extended.xml \
            --outputFile {output} \
            --physics.rangecut 100*m
        """

rule filter_hepmc_for_training:
    input:
        warmup="warmup/epic_ip6_extended.edm4hep.root",
        script=workflow.source_path("filterHEPMC3.py"),        
    output:
        SIMOUTDIR+"trainingTest{CAMPAIGN}.hepmc3.tree.root",
    params:
        events="root://dtn-eic.jlab.org//volatile/eic/EPIC/EVGEN/SIDIS/pythia6-eic/1.0.0/18x275/q2_0to1/pythia_ep_noradcor_18x275_q2_0.000000001_1.0_run1.ab.hepmc3.tree.root",
    shell:
        """
        python {input.script} --outFile {output} --inFile {params.events}
        """

rule beamline_training_sim:
    input:
        warmup="warmup/epic_ip6_extended.edm4hep.root",  
        events=SIMOUTDIR+"trainingTest{CAMPAIGN}.hepmc3.tree.root",      
    output:
        SIMOUTDIR+"trainingTest{CAMPAIGN}.edm4hep.root",
    shell:
        """
            exec npsim \
            --runType run \
            --random.seed 1 \
            --inputFiles {input.events} \
            --numberOfEvents 2000000 \
            --compactFile $DETECTOR_PATH/epic_ip6_extended.xml \
            --outputFile {output} \
            --physics.rangecut 1000*m 
        """

rule beamline_steering_analysis:
    params:
        xml=os.getenv("DETECTOR_PATH")+"/epic_ip6_extended.xml",
    input:
        script=workflow.source_path("beamlineAnalysis.C"),
        header=workflow.source_path("shared_functions.h"),
        data=SIMOUTDIR+"beamlineTest{CAMPAIGN}.edm4hep.root",
    output:
        rootfile=ANALYSISDIR+"beamlineTestAnalysis{CAMPAIGN}.root",
        beamspot_canvas=ANALYSISDIR+"beamspot_{CAMPAIGN}.png",
        x_px_canvas=ANALYSISDIR+"x_px_{CAMPAIGN}.png",
        y_py_canvas=ANALYSISDIR+"y_py_{CAMPAIGN}.png",
        fitted_position_means_stdevs_canvas=ANALYSISDIR+"fitted_position_means_stdevs_{CAMPAIGN}.png",
        fitted_momentum_means_stdevs_canvas=ANALYSISDIR+"fitted_momentum_means_stdevs_{CAMPAIGN}.png",
        pipe_parameter_canvas=ANALYSISDIR+"pipe_parameter_{CAMPAIGN}.png",
    shell:
        """
            root -l -b -q '{input.script}("{input.data}", "{output.rootfile}", "{params.xml}",
            "{output.beamspot_canvas}", "{output.x_px_canvas}", "{output.y_py_canvas}",
            "{output.fitted_position_means_stdevs_canvas}", "{output.fitted_momentum_means_stdevs_canvas}",
            "{output.pipe_parameter_canvas}")'
        """

rule beamline_acceptance_analysis:
    params:
        xml=os.getenv("DETECTOR_PATH")+"/epic_ip6_extended.xml",
    input:
        script=workflow.source_path("acceptanceAnalysis.C"),
        header=workflow.source_path("shared_functions.h"),
        data=SIMOUTDIR+"acceptanceTest{CAMPAIGN}.edm4hep.root",
    output:
        rootfile=ANALYSISDIR+"acceptanceTestAnalysis{CAMPAIGN}.root",
        beampipe_canvas=ANALYSISDIR+"acceptance_in_beampipe_{CAMPAIGN}.png",
        etheta_canvas=ANALYSISDIR+"acceptance_energy_theta_{CAMPAIGN}.png",
        etheta_acceptance_canvas=ANALYSISDIR+"acceptance_energy_theta_acceptance_{CAMPAIGN}.png",
        entrys_canvas=ANALYSISDIR+"acceptance_entrys_{CAMPAIGN}.png",
    shell:
        """
            root -l -b -q '{input.script}("{input.data}", "{output.rootfile}", "{params.xml}", "{output.beampipe_canvas}","{output.etheta_canvas}","{output.etheta_acceptance_canvas}",
            "{output.entrys_canvas}")'
        """


# Run EICRecon and create the necessary input tensors.
rule beamline_steering_reconstruction_eicrecon:
    params:
        xml=os.getenv("DETECTOR_PATH")+"/epic_ip6_extended.xml",
        output_collections="TaggerTrackerFeatureTensor,TaggerTrackerTargetTensor,MCParticles,BackwardsBeamlineHits",
    input:
        data=SIMOUTDIR+"trainingTest{CAMPAIGN}.edm4hep.root",
        executable="/home/simong/EIC/EICrecon/bin/eicrecon",
    output:
        eicreconfile=ANALYSISDIR+"trainingTest{CAMPAIGN}.eicrecon.edm4hep.root",
    shell:
        """
        {input.executable} -Ppodio:output_file={output.eicreconfile} -PLOWQ2:TaggerTrackerTransportationPreML:beamE=18.0 -Pdd4hep:xml_files={params.xml} -Ppodio:output_collections={params.output_collections} -Pplugins_to_ignore=janatop,LUMISPECCAL,ECTOF,BTOF,FOFFMTRK,RPOTS,B0TRK,MPGD,ECTRK,DRICH,DIRC,pid,tracking,EEMC,BEMC,FEMC,EHCAL,BHCAL,FHCAL,B0ECAL,ZDC,BTRK,BVTX,PFRICH,richgeo,evaluator,pid_lut,reco,rootfile  {input.data} 
        """

# Processes the simulation output data for training
rule beamline_steering_reconstruction_preparation:
    input:
        script=workflow.source_path("processData.C"),
        data=ANALYSISDIR+"trainingTest{CAMPAIGN}.eicrecon.edm4hep.root",
    output:
        rootfile=ANALYSISDIR+"BeamlineSteeringReconstructionData{CAMPAIGN}.root",
    shell:
        """
        root -l -b -q '{input.script}("{input.data}", "{output.rootfile}",18.0)'
        """


# Trains a regression model to predict the MCParticle momentum from the B2eR beamline virtual tracker hits.
rule beamline_steering_reconstruction_training:
    input:
        script=workflow.source_path("SteeringRegression.py"),
        scriptdata=workflow.source_path("ProcessData.py"),
        scriptmodel=workflow.source_path("RegressionModel.py"),
        data=ANALYSISDIR+"BeamlineSteeringReconstructionData{CAMPAIGN}.root",
    output:
        onnxfile=ANALYSISDIR+"BeamlineSteeringReconstructionTest{CAMPAIGN}.onnx",
    shell:
        """
        python {input.script} --dataFiles {input.data} --outModelFile {output.onnxfile} --epochs 400
        """

# Trains a regression model to predict the MCParticle momentum from the B2eR beamline virtual tracker hits.
rule beamline_steering_reconstruction_test:
    input:
        script=workflow.source_path("TestModel.py"),
        data=ANALYSISDIR+"BeamlineSteeringReconstructionData{CAMPAIGN}.root",
        model=ANALYSISDIR+"BeamlineSteeringReconstructionTest{CAMPAIGN}.onnx",
    output:
        directory=directory(ANALYSISDIR+"NN_Test_{CAMPAIGN}/")
    shell:
        """
            mkdir {output.directory}      
            python {input.script} --dataFiles {input.data} --modelFile {input.model} --outDir {output.directory}
        """

rule beamline:
    input:
        ANALYSISDIR+"beamlineTestAnalysis{CAMPAIGN}.root",
        ANALYSISDIR+"beamspot_{CAMPAIGN}.png",
        ANALYSISDIR+"x_px_{CAMPAIGN}.png",
        ANALYSISDIR+"y_py_{CAMPAIGN}.png",
        ANALYSISDIR+"fitted_position_means_stdevs_{CAMPAIGN}.png",
        ANALYSISDIR+"fitted_momentum_means_stdevs_{CAMPAIGN}.png",
        ANALYSISDIR+"pipe_parameter_{CAMPAIGN}.png",  
        ANALYSISDIR+"acceptanceTestAnalysis{CAMPAIGN}.root",
        ANALYSISDIR+"acceptance_in_beampipe_{CAMPAIGN}.png",
        ANALYSISDIR+"acceptance_energy_theta_{CAMPAIGN}.png",
        ANALYSISDIR+"acceptance_energy_theta_acceptance_{CAMPAIGN}.png",     
        ANALYSISDIR+"acceptance_entrys_{CAMPAIGN}.png", 
        directory(ANALYSISDIR+"NN_Test_{CAMPAIGN}/")
    output:
        directory("results/beamline/{CAMPAIGN}/")
    shell:
        """
            mkdir {output}        
            cp -r {input} {output}
        """

rule beamline_local:
    input:
        "results/beamline/local/"
