SIMOUTDIR="sim_output/lowq2_reconstruction/"
ANALYSISDIR=SIMOUTDIR+"analysis/"

##########################################################################################
### Rules for checking the reconstruction of the electron momentum
##########################################################################################

# Filter LowQ2 events from xrootd server - Using the acceptance events didn't work
# ToDo: Do a proper investigation into why the feature to target mapping isn't unique
rule filter_hepmc_for_training:
    input:
        warmup="warmup/epic_ip6_extended.edm4hep.root",
        script=workflow.source_path("filterHEPMC3.py"),        
    output:
        SIMOUTDIR+"Low-Q2_Training_Events.hepmc3.tree.root",
    params:
        events="root://dtn-eic.jlab.org//volatile/eic/EPIC/EVGEN/SIDIS/pythia6-eic/1.0.0/18x275/q2_0to1/pythia_ep_noradcor_18x275_q2_0.000000001_1.0_run1.ab.hepmc3.tree.root",
    shell:
        """
        python {input.script} --outFile {output} --inFile {params.events}
        """

# Run pythia6 Low-Q2 events through the simulation
rule beamline_training_sim:
    input:
        warmup="warmup/epic_ip6_extended.edm4hep.root",  
        events=SIMOUTDIR+"Low-Q2_Training_Events.hepmc3.tree.root",      
    output:
        SIMOUTDIR+"Low-Q2_Training_SimEvents_{CAMPAIGN}.edm4hep.root",
    shell:
        """
            exec npsim \
            --runType run \
            --random.seed 1 \
            --inputFiles {input.events} \
            --numberOfEvents 1000000 \
            --compactFile $DETECTOR_PATH/epic_ip6_extended.xml \
            --outputFile {output} \
            --physics.rangecut 100*m 
        """

# Run EICrecon and create input tensors for reconstruction.
rule beamline_reconstruction_tensors_eicrecon:
    params:
        xml=os.getenv("DETECTOR_PATH")+"/epic_ip6_extended.xml",
        output_collections="BackwardsBeamlineHits,TaggerTrackerFeatureTensor,TaggerTrackerTargetTensor,MCParticles,EventHeader",
        ignore_plugins="janatop,LUMISPECCAL,ECTOF,BTOF,FOFFMTRK,RPOTS,B0TRK,MPGD,ECTRK,DRICH,DIRC,pid,tracking,EEMC,BEMC,FEMC,EHCAL,BHCAL,FHCAL,B0ECAL,ZDC,BTRK,BVTX,PFRICH,richgeo,evaluator,pid_lut,reco,rootfile"
    input:
        data=SIMOUTDIR+"Low-Q2_Training_SimEvents_{CAMPAIGN}.edm4hep.root",
    output:
        eicreconfile=ANALYSISDIR+"Low-Q2_Training_Tensors_{CAMPAIGN}.eicrecon.edm4hep.root",
    shell:
        """
        eicrecon -Ppodio:output_file={output.eicreconfile} -PLOWQ2:TaggerTrackerTransportationPreML:beamE=18.0 -Pdd4hep:xml_files={params.xml} \
        -Ppodio:output_collections={params.output_collections} -Pplugins_to_ignore={params.ignore_plugins}  {input.data} 
        """

# Run EICrecon to create TaggerTrackerReconstructedParticles
rule beamline_reconstruction_particles_eicrecon:
    params:
        xml=os.getenv("DETECTOR_PATH")+"/epic_ip6_extended.xml",
        output_collections="TaggerTrackerReconstructedParticles,MCParticles,EventHeader",
        ignore_plugins="janatop,LUMISPECCAL,ECTOF,BTOF,FOFFMTRK,RPOTS,B0TRK,MPGD,ECTRK,DRICH,DIRC,pid,tracking,EEMC,BEMC,FEMC,EHCAL,BHCAL,FHCAL,B0ECAL,ZDC,BTRK,BVTX,PFRICH,richgeo,evaluator,pid_lut,reco,rootfile"
    input:
        data=ANALYSISDIR+"Low-Q2_Training_Tensors_{CAMPAIGN}.eicrecon.edm4hep.root",
    output:
        eicreconfile=ANALYSISDIR+"Low-Q2_Training_Particles_{CAMPAIGN}.eicrecon.edm4hep.root",
    shell:
        """
        eicrecon -Ppodio:output_file={output.eicreconfile} -PLOWQ2:TaggerTrackerTransportationPreML:beamE=18.0 -PLOWQ2:TaggerTrackerTransportationPostML:beamE=18.0 -Pdd4hep:xml_files={params.xml} \
        -Ppodio:output_collections={params.output_collections} -Pplugins_to_ignore={params.ignore_plugins}  {input.data} 
        """

# Test the resolution of TaggerTrackerReconstructedParticles compared to their MCParticles
rule beamline_reconstruction_particles_test:
    input:
        script=workflow.source_path("reconstructionAnalysis.C"),
        data=ANALYSISDIR+"Low-Q2_Training_Particles_{CAMPAIGN}.eicrecon.edm4hep.root",
    output:
        momentumCanvas=ANALYSISDIR+"momentum_resolution_{CAMPAIGN}.png",
        energyThetaPhiCanvas=ANALYSISDIR+"energy_theta_phi_resolution_{CAMPAIGN}.png",
        relationCanvas=ANALYSISDIR+"relation_resolution_{CAMPAIGN}.png",
        resolutionGraphsCanvas=ANALYSISDIR+"resolution_graphs_{CAMPAIGN}.png",
    shell:
        """
        root -l -b -q '{input.script}("{input.data}", 18, "{output.momentumCanvas}", "{output.energyThetaPhiCanvas}", "{output.relationCanvas}", "{output.resolutionGraphsCanvas}")'
        """

##########################################################################################
### Rules for training new onnx reconstruction neural network
##########################################################################################

# Processes the simulation output data for training
rule beamline_steering_reconstruction_preparation:
    input:
        script=workflow.source_path("cleanData.C"),
        data=ANALYSISDIR+"Low-Q2_Training_Tensors_{CAMPAIGN}.eicrecon.edm4hep.root",
    output:
        rootfile=ANALYSISDIR+"BeamlineSteeringReconstructionData{CAMPAIGN}.root",
    shell:
        """
        root -l -b -q '{input.script}("{input.data}", "{output.rootfile}",18.0)'
        """


# Trains a regression model to predict the MCParticle momentum from the B2eR beamline virtual tracker hits.
rule beamline_steering_reconstruction_training:
    input:
        script=workflow.source_path("SteeringRegression.py"),
        scriptdata=workflow.source_path("LoadData.py"),
        scriptmodel=workflow.source_path("RegressionModel.py"),
        data=ANALYSISDIR+"BeamlineSteeringReconstructionData{CAMPAIGN}.root",
    output:
        onnxfile=ANALYSISDIR+"BeamlineSteeringReconstructionTest{CAMPAIGN}_{N}.onnx",
    shell:
        """
        python {input.script} --dataFiles {input.data} --outModelFile {output.onnxfile} --epochs 1000
        """

# Run eicrecon with the newly trained neural network
rule beamline_steering_reconstruction_particles_trained_eicrecon:
    params:
        xml=os.getenv("DETECTOR_PATH")+"/epic_ip6_extended.xml",
        output_collections="TaggerTrackerReconstructedParticles,MCParticles,EventHeader",
        ignore_plugins="janatop,LUMISPECCAL,ECTOF,BTOF,FOFFMTRK,RPOTS,B0TRK,MPGD,ECTRK,DRICH,DIRC,pid,tracking,EEMC,BEMC,FEMC,EHCAL,BHCAL,FHCAL,B0ECAL,ZDC,BTRK,BVTX,PFRICH,richgeo,evaluator,pid_lut,reco,rootfile"
    input:
        data=ANALYSISDIR+"Low-Q2_Training_Tensors_{CAMPAIGN}.eicrecon.edm4hep.root",
        onnxfile=ANALYSISDIR+"BeamlineSteeringReconstructionTest{CAMPAIGN}_{N}.onnx",
    output:
        eicreconfile=ANALYSISDIR+"Low-Q2_Trained_Particles_{CAMPAIGN}_{N}.eicrecon.edm4hep.root",
    shell:
        """
        eicrecon -Ppodio:output_file={output.eicreconfile}  -Pjana:nevents=1000000 -PLOWQ2:TaggerTrackerTransportationPreML:beamE=18.0 -PLOWQ2:TaggerTrackerTransportationPostML:beamE=18.0 -Pdd4hep:xml_files={params.xml} \
        -PLOWQ2:TaggerTrackerTransportationInference:modelPath={input.onnxfile} -Ppodio:output_collections={params.output_collections} -Pplugins_to_ignore={params.ignore_plugins}  {input.data} 
        """

# Test the resolution of TaggerTrackerReconstructedParticles compared to their MCParticles
rule beamline_reconstruction_particles_trained_test:
    input:
        script=workflow.source_path("reconstructionAnalysis.C"),
        data=ANALYSISDIR+"Low-Q2_Trained_Particles_{CAMPAIGN}.eicrecon.edm4hep.root",
    output:
        momentumCanvas=ANALYSISDIR+"trained_momentum_resolution_{CAMPAIGN}.png",
        energyThetaPhiCanvas=ANALYSISDIR+"trained_energy_theta_phi_resolution_{CAMPAIGN}.png",
        relationCanvas=ANALYSISDIR+"trained_relation_resolution_{CAMPAIGN}.png",
        resolutionGraphsCanvas=ANALYSISDIR+"trained_resolution_graphs_{CAMPAIGN}.png",
    shell:
        """
        root -l -b -q '{input.script}("{input.data}", 18, "{output.momentumCanvas}", "{output.energyThetaPhiCanvas}", "{output.relationCanvas}", "{output.resolutionGraphsCanvas}")'
        """

##########################################################################################
# Combine results
##########################################################################################
rule reconstruction:
    input: 
        directory(ANALYSISDIR+"NN_Test_{CAMPAIGN}/")
    output:
        directory("results/beamline/reconstruction_{CAMPAIGN}/")
    shell:
        """
            mkdir {output}        
            cp -r {input} {output}
        """