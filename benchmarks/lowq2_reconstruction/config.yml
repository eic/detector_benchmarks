sim:lowq2_reconstruction:
  extends: .det_benchmark
  stage: simulate
  script:
    - |
      snakemake $SNAKEMAKE_FLAGS --cores $MAX_CORES_PER_JOB \
        sim_output/lowq2_reconstruction/Low-Q2_Training_SimEvents_local.edm4hep.root \

bench:lowq2_reconstruction:
  extends: .det_benchmark
  stage: benchmarks
  needs:
    - ["sim:lowq2_reconstruction","bench:beamline"]
  script:
    - snakemake $SNAKEMAKE_FLAGS --cores $MAX_CORES_PER_JOB lowq2_reconstruction_local

check:lowq2_reconstruction:
  needs: ["bench:lowq2_reconstruction"]
  stage: benchmarks
  script: |
    if grep '"fail": 1' results/lowq2_reconstruction/test_local/Low-Q2_test_Resolution_Results_local.json; then
      exit 1
    fi

bench:lowq2_reconstruction_retrained:
  extends: .det_benchmark
  stage: benchmarks
  needs:
    - "check:lowq2_reconstruction"
  script:
    - export PYTHONUSERBASE=$LOCAL_DATA_PATH/deps
    - pip install -r benchmarks/lowq2_reconstruction/requirements.txt
    - snakemake $SNAKEMAKE_FLAGS --cores $MAX_CORES_PER_JOB lowq2_reconstruction_retrained
  when: on_failure

check:lowq2_reconstruction_retrained:
  needs: ["bench:lowq2_reconstruction_retrained"]
  stage: benchmarks
  script: |
    if grep '"fail": 1' results/lowq2_reconstruction/retrained_local/Low-Q2_retrained_Resolution_Results_local.json; then
      exit 1
    fi

collect_results:lowq2_reconstruction:
  extends: .det_benchmark
  stage: collect
  needs:
    - "bench:lowq2_reconstruction"
    - "bench:lowq2_reconstruction_retrained"
  script:
    - ls -lrht
    - mv results{,_save}/ # move results directory out of the way to preserve it
    - snakemake $SNAKEMAKE_FLAGS --cores 1 --delete-all-output lowq2_reconstruction_local
    - mv results{_save,}/
