sim:lowq2_reconstruction:
  extends: .det_benchmark
  stage: simulate
  script:
    - |
      snakemake $SNAKEMAKE_FLAGS --cores $MAX_CORES_PER_JOB \
        sim_output/lowq2_reconstruction/Low-Q2_Training_SimEvents_local.edm4hep.root \

bench:lowq2_reconstruction:
  extends: .det_benchmark
  stage: benchmarks
  needs:
    - ["sim:lowq2_reconstruction"]
  script:
    - snakemake $SNAKEMAKE_FLAGS --cores $MAX_CORES_PER_JOB lowq2_reconstruction_local

check:lowq2_reconstruction:
  extends: .det_benchmark
  needs: ["bench:lowq2_reconstruction"]
  stage: benchmarks
  script: |
    if grep '"fail": 1' results/lowq2_reconstruction/test_local/Low-Q2_test_Resolution_Results_local.json; then
      exit 1
    fi

bench:lowq2_reconstruction_retrained:
  extends: .det_benchmark
  stage: benchmarks
  needs: [bench:lowq2_reconstruction,check:lowq2_reconstruction]
  rules:
    - if: '$BENCHMARKS_TAG =~ /nightly/'
      when: on_failure
    - when: never
  script:
    - export PYTHONUSERBASE=$LOCAL_DATA_PATH/deps
    - pip install -r benchmarks/lowq2_reconstruction/requirements.txt
    - snakemake $SNAKEMAKE_FLAGS --cores $MAX_CORES_PER_JOB lowq2_reconstruction_retrained

check:lowq2_reconstruction_retrained:
  extends: .det_benchmark
  needs: ["bench:lowq2_reconstruction_retrained"]
  stage: benchmarks
  rules:
    - if: '$BENCHMARKS_TAG =~ /nightly/'
      when: on_success
    - when: never  
  script: |
    if grep '"fail": 1' results/lowq2_reconstruction/retrained_local/Low-Q2_retrained_Resolution_Results_local.json; then
      exit 1
    fi

collect_results:lowq2_reconstruction:
  extends: .det_benchmark
  stage: collect
  needs:
    - "bench:lowq2_reconstruction"
  script:
    - ls -lrht
    - mv results{,_save}/ # move results directory out of the way to preserve it
    - snakemake $SNAKEMAKE_FLAGS --cores 1 --delete-all-output lowq2_reconstruction_local
    - mv results{_save,}/

collect_results:lowq2_reconstruction_retrained:
  extends: .det_benchmark
  stage: collect
  needs:
    - "bench:lowq2_reconstruction_retrained"
  rules:
    - if: '$BENCHMARKS_TAG =~ /nightly/'
      when: on_success
    - when: never
  script:
    - ls -lrht
    - mv results{,_save}/ # move results directory out of the way to preserve it
    - snakemake $SNAKEMAKE_FLAGS --cores 1 --delete-all-output lowq2_reconstruction_retrained
    - mv results{_save,}/

upload_onnx:lowq2_reconstruction:
  extends: .det_benchmark
  stage: deploy
  needs:
    - "bench:lowq2_reconstruction_retrained"
  rules:
    - if: '$BENCHMARKS_TAG =~ /nightly/'
      when: on_success
    - when: never
  script:
    - echo "Deploying lowq2_onnx file to xrootd server"
    - LOWQ2_ONNX_FILE=results/lowq2_reconstruction/retrained_local/Low-Q2_Steering_Reconstruction_Test_local.onnx
    - if [ -f $LOWQ2_ONNX_FILE ]; then
        echo "File $LOWQ2_ONNX_FILE exists, calculating hash";
        ONNX_HASH=$(sha256sum $LOWQ2_ONNX_FILE | cut -d' ' -f1);
        echo "ONNX file hash = $ONNX_HASH";
      else
        echo "File $LOWQ2_ONNX_FILE does not exist, deployment failed";
        exit 1;
      fi
    - XROOTD_ENDPOINT="root://dtn-eic.jlab.org/"
    - XROOTD_CALIB_PREFIX="/volatile/eic/EPIC/xrdtest/CALIB/"
    - ONNX_UPLOAD_URL="$OSDF_ENDPOINT$OSDF_CALIB_OUTPUT_PREFIX/$ONNX_HASH/Low-Q2_Steering_Reconstruction.onnx"
    - ONNX_DOWNLOAD_URL="$XROOTD_ENDPOINT$XROOTD_CALIB_PREFIX/$ONNX_HASH/Low-Q2_Steering_Reconstruction.onnx"
    - printenv
    - echo "Updating PR with lowq2 reconstruction results"
    - echo "ONNX file will be available at $ONNX_UPLOAD_URL"
    - echo "Uploading images to GitHub CDN"
    - |
      # Function to upload image to GitHub's attachment CDN
      upload_image() {
        local img_path="$1"
        
        if [ ! -f "$img_path" ]; then
          echo "⚠️ Image not found: $img_path"
          return
        fi
        
        # Upload using GitHub's attachment API endpoint
        # This is what the web UI uses when you drag-and-drop images
        response=$(curl -s -X POST \
          -H "Authorization: Bearer $GITHUB_REPO_POST_COMMENT_BENCHMARKS" \
          -H "Content-Type: $(file -b --mime-type "$img_path")" \
          -H "Accept: application/vnd.github+json" \
          --data-binary "@$img_path" \
          "https://uploads.github.com/repos/eic/detector_benchmarks/assets?name=$(basename "$img_path")")
        
        # Extract URL from response
        img_url=$(echo "$response" | grep -oP '"url":\s*"\K[^"]+' | head -1)
        
        if [ -n "$img_url" ]; then
          echo "✅ Uploaded: $img_url"
          echo "$img_url"
        else
          echo "⚠️ Upload failed for $img_path"
          echo ""
        fi
      }
      
      BEFORE_IMAGE="results/lowq2_reconstruction/test_local/test_energy_theta_phi_resolution_local.png"
      AFTER_IMAGE="results/lowq2_reconstruction/retrained_local/retrained_energy_theta_phi_resolution_local.png"
      
      BEFORE_URL=$(upload_image "$BEFORE_IMAGE")
      AFTER_URL=$(upload_image "$AFTER_IMAGE")
      
      # Build image arguments
      IMAGE_ARGS=""
      if [ -n "$BEFORE_URL" ]; then
        IMAGE_ARGS="$IMAGE_ARGS --beforeImages $BEFORE_URL"
      fi
      if [ -n "$AFTER_URL" ]; then
        IMAGE_ARGS="$IMAGE_ARGS --afterImages $AFTER_URL"
      fi
      
      python benchmarks/lowq2_reconstruction/makePRSuggestion.py \
      --pr 213 \
      --newURL $ONNX_DOWNLOAD_URL \
      --githubToken $GITHUB_REPO_POST_COMMENT_BENCHMARKS \
      --calibrationFile calibrations/onnx/Low-Q2_Steering_Reconstruction.onnx \
      --xml benchmarks/lowq2_reconstruction/calibrations.xml \
      --repository eic/detector_benchmarks \
      $IMAGE_ARGS
    - echo "Updating GitHub status for lowq2 reconstruction"
