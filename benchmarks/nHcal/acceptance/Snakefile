import os

DETECTOR_PATH = os.environ["DETECTOR_PATH"]

rule nhcal_acceptance_simulate:
    output:
        "sim_output/nhcal_acceptance/E{ENERGY}GeV/sim_{DETECTOR_CONFIG}.{INDEX}.edm4hep.root",
    params:
        N_EVENTS=10000,
    shell:
        """
set -m
exec npsim \
    --compactFile {DETECTOR_PATH}/{wildcards.DETECTOR_CONFIG}.xml \
    --numberOfEvents {params.N_EVENTS} \
    --random.seed $RANDOM \
    --enableGun \
    -v WARNING \
    --gun.particle pi- \
    --gun.thetaMin 120*degree \
    --gun.thetaMax 180*degree \
    --gun.distribution uniform \
    --gun.energy "{wildcards.ENERGY}*GeV" \
    --outputFile {output}
"""


rule nhcal_acceptance_combine:
    input:
        lambda wildcards: expand(
            os.path.join("sim_output/nhcal_acceptance/E{ENERGY}GeV/", "sim_{DETECTOR_CONFIG}.{INDEX:02d}.edm4hep.root"), 
            DETECTOR_CONFIG=wildcards.DETECTOR_CONFIG,
            ENERGY=wildcards.ENERGY,
            INDEX=range(int(wildcards.N)),
        ),
    wildcard_constraints:
        N=r"\d+",
        ENERGY=r"\d+"
    output:
        f"sim_output/nhcal_acceptance/sim_{{DETECTOR_CONFIG}}_E{{ENERGY}}GeV_combined_{{N}}files.edm4hep.root",
    shell:
        """
hadd {output} {input} 
"""

rule nhcal_acceptance_analysis:
    input:
        combined="sim_output/nhcal_acceptance/sim_{DETECTOR_CONFIG}_E{ENERGY}GeV_combined_{N}files.edm4hep.root",
        script="benchmarks/nHcal/acceptance/scripts/acceptance_analysis.cxx",
    output:
        f"results/nhcal_acceptance/analysis_{{DETECTOR_CONFIG}}_E{{ENERGY}}GeV_combined_{{N}}files.pdf",
    shell:
        """
    root -l -b -q '{input.script}("{input.combined}","{output}")'
"""
