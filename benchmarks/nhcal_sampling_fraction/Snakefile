import os

DETECTOR_PATH = os.environ["DETECTOR_PATH"]
DETECTOR_CONFIG = "epic_backward_hcal_only.xml"

rule nhcal_sampling_fraction_simulate:
    output:
        "sim_output/nhcal_sampling_fraction/{PARTICLE}/E{ENERGY}GeV/sim.{INDEX}.edm4hep.root",
    params:
        N_EVENTS=1000,
    shell:
        """
set -m
mkdir -p sim_output/nhcal_sampling_fraction/{wildcards.PARTICLE}/E{wildcards.ENERGY}GeV
exec ddsim \
    --compactFile {DETECTOR_PATH}/{DETECTOR_CONFIG} \
    --numberOfEvents {params.N_EVENTS} \
    --random.seed $RANDOM \
    --enableGun \
    -v WARNING \
    --gun.particle {wildcards.PARTICLE} \
    --gun.thetaMin 120*degree \
    --gun.thetaMax 180*degree \
    --gun.distribution uniform \
    --gun.energy "{wildcards.ENERGY}*GeV" \
    --outputFile {output}
"""


rule nhcal_sampling_fraction_combine:
    input:
        lambda wildcards: expand(
            "sim_output/nhcal_sampling_fraction/{PARTICLE}/E{ENERGY}GeV/sim.{INDEX:02d}.edm4hep.root", 
            ENERGY=["1", "2", "5", "10"],
            PARTICLE=["pi-", "neutron", "e-"],
            INDEX=range(int(wildcards.N)),
        ),
    wildcard_constraints:
        N=r"\d+",
        ENERGY=r"\d+"
    output:
        f"sim_output/nhcal_sampling_fraction/sim_{{N}}files_per.edm4hep.root",
    shell:
        """
hadd {output} {input} 
"""

rule nhcal_sampling_fraction_analysis:
    input:
        combined="sim_output/nhcal_sampling_fraction/sim_{N}files_per.edm4hep.root",
        script="benchmarks/nhcal_sampling_fraction/scripts/sampling_fraction_analysis.cxx",
    output:
        f"results/nhcal_sampling_fraction/analysis_{{N}}files_per.pdf",
    shell:
        """
    root -l -b -q '{input.script}("{input.combined}","{output}","{DETECTOR_PATH}/{DETECTOR_CONFIG}")'
"""