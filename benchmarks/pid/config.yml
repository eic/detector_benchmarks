sim:backward:
  extends: .det_benchmark
  stage: simulate
  script:
    - npsim --runType batch --numberOfEvents 100 --filter.tracker edep0 --compactFile ${DETECTOR_PATH}/${DETECTOR_CONFIG}.xml --enableGun --gun.energy "5*GeV" --gun.particle "${PARTICLE}" --gun.thetaMin 130*deg --gun.thetaMax 177*deg --gun.distribution "cos(theta)" --outputFile sim_output/sim_pid_backward_${PARTICLE}_5GeV.edm4hep.root
    - rootls -t sim_output/sim_pid_backward_${PARTICLE}_5GeV.edm4hep.root
  parallel:
    matrix:
      - PARTICLE: ["e-", "pi+", "proton"]

sim:forward:
  extends: .det_benchmark
  stage: simulate
  script:
    - npsim --runType batch --numberOfEvents 100 --filter.tracker edep0 --compactFile ${DETECTOR_PATH}/${DETECTOR_CONFIG}.xml --enableGun --gun.energy "5*GeV" --gun.particle "${PARTICLE}" --gun.thetaMin 3*deg --gun.thetaMax 50*deg --gun.distribution "cos(theta)" --outputFile sim_output/sim_pid_forward_${PARTICLE}_5GeV.edm4hep.root
    - rootls -t sim_output/sim_pid_forward_${PARTICLE}_5GeV.edm4hep.root
  parallel:
    matrix:
      - PARTICLE: ["e-", "pi+", "proton"]

bench:mrich:
  extends: .det_benchmark
  stage: benchmarks
  needs: ["sim:backward"]
  script:
    - |
      if [[ ${DETECTOR_VERSION} =~ acadia ]]; then
        echo "Performing MRICH benchmarks for acadia"
        mkdir -p results/pid/backward/mrich/
        root -t -x -q -b "benchmarks/pid/scripts/mrich_analysis.cxx+(\"sim_output/sim_pid_backward_${PARTICLE}_5GeV.edm4hep.root\", \"${PARTICLE}\")"
      else
        echo "Skipping MRICH Benchmarks for non-acadia detector version ${DETECTOR_VERSION}"
      fi
  parallel:
    matrix:
      - PARTICLE: ["e-", "pi+", "proton"]

bench:drich:
  extends: .det_benchmark
  stage: benchmarks
  needs: ["sim:forward"]
  script:
    - |
      mkdir -p results/pid/forward/drich/
      root -t -x -q -b "benchmarks/pid/scripts/drich_analysis.cxx+(\"sim_output/sim_pid_forward_${PARTICLE}_5GeV.edm4hep.root\", \"${PARTICLE}\")"
  parallel:
    matrix:
      - PARTICLE: ["e-", "pi+", "proton"]

bench:erich:
  extends: .det_benchmark
  stage: benchmarks
  needs: ["sim:backward"]
  script:
    - |
      if [[ ${DETECTOR_VERSION} =~ acadia ]]; then
        echo "Skipping ERICH benchmarks for acadia"
      else
        echo "Doing MRICH Benchmarks for ${DETECTOR_VERSION}"
        echo "FIXME: needs implementing"
      fi
  parallel:
    matrix:
      - PARTICLE: ["e-", "pi+", "proton"]

collect_results:pid:
  extends: .det_benchmark
  stage: collect
  #needs: 
  script:
    - ls -lrht

